buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${mod_version}"
group = "tictim.${mod_id}"
archivesBaseName = "${mod_name}-1.19"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    main {
        resources { srcDir 'src/generated/resources' }
    }

    datagen {
        java { srcDir "src/datagen/java" }
        resources { srcDir "src/datagen/resources" }

        compileClasspath += configurations.getByName("minecraft")
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

    gametest {
        java { srcDir "src/test/java" }
        resources { srcDir "src/test/resources" }

        compileClasspath += configurations.getByName("minecraft")
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

minecraft {
    mappings channel: 'parchment', version: '2022.08.21-1.19.2'
    // makeObfSourceJar = false

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"

            mods {
                paraglider {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"

            mods {
                paraglider {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'paraglider'

            mods {
                paraglider {
                    source sourceSets.main
                    source sourceSets.gametest
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'paraglider', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                paraglider {
                    source sourceSets.main
                    source sourceSets.datagen
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "paraglider.refmap.json"
    showMessageTypes = true
}

dependencies {
    minecraft "net.minecraftforge:forge:1.19.2-43.1.2"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}


jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Tictim",
                "Specification-Version"   : "${version}",
                "Implementation-Title"    : "tictim.${mod_id}",
                "Implementation-Vendor"   : "Tictim",
                "Implementation-Version"  : "${version}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector"          : "tictim.paraglider.MixinConnector"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')
